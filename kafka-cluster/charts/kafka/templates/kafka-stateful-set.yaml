{{- if .Capabilities.APIVersions.Has "apps/v1beta2" }}
apiVersion: "apps/v1beta2"
kind: StatefulSet
{{- else if .Capabilities.APIVersions.Has "apps/v1beta1" }}
apiVersion: "apps/v1beta1"
kind: StatefulSet
{{- else if .Capabilities.APIVersions.Has "apps/v1alpha1" }}
apiVersion: "apps/v1alpha1"
kind: PetSet
{{- end }}
metadata:
  name: {{ .Values.dnsName | quote }}
  labels:
    component: kafka-broker
    {{ include "standardLabels" . | indent 4}}
spec:
  serviceName: {{ .Values.dnsName | quote }}
  replicas: {{ .Values.nodes }}
  template:
    metadata:
      labels:
        component: kafka-broker
        {{ include "standardLabels" . | indent 8}}
      annotations:
      {{- if .Values.global.prometheus }}
        prometheus.io/scrape: true
        prometheus.io/path: /metrics
        prometheus.io/port: 5555
      {{- end }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector: 
        {{- range $key, $val := .Values.nodeSelector }}
        {{ $key }}: {{ $val | quote }}
        {{- end}}
      {{- end }}
      terminationGracePeriodSeconds: 10
      containers:
      - name: broker
        image: {{ if .Values.imageRegistry }}{{ .Values.imageRegistry }}/{{ end }}{{ .Values.image }}:{{ .Values.tag }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        env:
        {{- if .Values.global.jolokia }}
        - name: AB_JOLOKIA_PASSWORD_RANDOM
          value: "false"
        - name: AB_JOLOKIA_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.applicationName }}-jolokia-secret
              key: username
        - name: AB_JOLOKIA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.applicationName }}-jolokia-secret
              key: password
        {{- end }}
        - name: KAFKA_HEAP_OPTS 
          value: "{{ .Values.jvmFlags }}"
        ports:
        - containerPort: 9092
          name: kafka
        {{- if .Values.global.prometheus }}
        - containerPort: 5555
          name: prometheus
        {{- end }}
        {{- if .Values.global.jolokia }}
        - containerPort: 8778
          name: jolokia
        {{- end }}
        volumeMounts:
        - name: datadir
          mountPath: /opt/kafka/data
        - name: kafka-service-properties
          mountPath: /opt/mounted/config
      volumes:
      - name: datadir
        emptyDir: {}
      - name: kafka-service-properties
        configMap:
          name: kafka-{{ .Values.global.applicationName }}-service-properties
      {{- if .Values.global.hawkular }}
      - name: hawkular-openshift-agent
        configMap:
          name: kafka-{{ .Values.global.applicationName }}-metrics-config
      {{- end }}
  {{- if .Values.persistent }}
  volumeClaimTemplates:
  - metadata:
      name: kafka-{{ .Values.global.applicationName }}-datadir
      labels:
        component: kafka-broker
        {{ include "standardLabels" . | indent 8}}
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes: 
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.storageSize | quote }}
  {{- end }}
